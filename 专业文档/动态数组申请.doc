{\rtf1\ansi\ansicpg936\deff0\deflang1033\deflangfe2052{\fonttbl{\f0\fmodern\fprq6\fcharset134 \'cb\'ce\'cc\'e5;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\lang2052\f0\fs20    \'ca\'fd\'d7\'e9\'b5\'c4\'d3\'d0\'b5\'e3\'d4\'da\'d3\'da\'cb\'e6\'bb\'fa\'b4\'e6\'c8\'a1\'a3\'ac\'c8\'bb\'b6\'f8\'c6\'e4\'b2\'bb\'d7\'e3\'d2\'b2\'ca\'c7\'c3\'f7\'cf\'d4\'b5\'c4\'a3\'ac\'be\'cd\'ca\'c7\'d2\'bb\'b5\'a9\'bd\'a8\'c1\'a2\'c6\'e4\'b4\'f3\'d0\'a1\'be\'cd\'b2\'bb\'c4\'dc\'b8\'c4\'b1\'e4\'a1\'a3\'c8\'f4\'d3\'c3\'ca\'fd\'d7\'e9\'b4\'e6\'b4\'a2\'ca\'fd\'be\'dd\'a3\'ac\'d4\'f2\'b1\'d8\'d0\'eb\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'bf\'c9\'c4\'dc\'b4\'e6\'b7\'c5\'b5\'c4\'d7\'ee\'b4\'f3\'bf\'d5\'bc\'e4\'b5\'c4\'ca\'fd\'d7\'e9\'a3\'ac\'d5\'e2\'ce\'de\'d2\'c9\'c0\'cb\'b7\'d1\'c1\'cb\'bf\'d5\'bc\'e4\'a1\'a3\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'bd\'e2\'be\'f6\'c1\'cb\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a1\'a3\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'b5\'c4\'cb\'bc\'c2\'b7\'ca\'c7\'a3\'ba\'cf\'c8\'bd\'a8\'c1\'a2\'d2\'bb\'b6\'a8\'b4\'f3\'d0\'a1\'b5\'c4\'ca\'fd\'d7\'e9\'a3\'ac\'cf\'f2\'d5\'e2\'b8\'f6\'ca\'fd\'d7\'e9\'d6\'d0\'b4\'e6\'b7\'c5\'ca\'fd\'be\'dd\'a3\'ac\'c8\'e7\'b9\'fb\'ca\'fd\'d7\'e9\'d2\'d1\'c2\'fa\'a3\'ac\'d4\'f2\'d6\'d8\'d0\'c2\'c9\'ea\'c7\'eb\'d2\'bb\'b8\'f6\'b8\'fc\'b4\'f3\'b5\'c4\'bf\'d5\'bc\'e4\'c0\'b4\'b4\'e6\'b7\'c5\'a1\'a3\'c3\'bf\'b4\'ce\'d6\'d8\'d0\'c2\'c9\'ea\'c7\'eb\'ca\'b1\'bf\'c9\'d2\'d4\'d6\'b8\'b6\'a8\'d4\'f6\'c1\'bf\'b5\'c4\'b4\'f3\'d0\'a1(\'d2\'bb\'b0\'e3\'ce\'aa\'d4\'ad\'c0\'b4\'ca\'fd\'be\'dd\'b5\'c41.5\'b1\'b6)\'a3\'ac\'d2\'b2\'bf\'c9\'d2\'d4\'b9\'cc\'b6\'a8\'b4\'f3\'d0\'a1\'a1\'a3\'d5\'e2\'d1\'f9\'d7\'f6\'b5\'c4\'ba\'c3\'b4\'a6\'ca\'c7\'bf\'d5\'bc\'e4\'c0\'cb\'b7\'d1\'b2\'bb\'b6\'e0\'a3\'ac\'c6\'e4\'b2\'bb\'d7\'e3\'ca\'c7\'d6\'d8\'d0\'c2\'c9\'ea\'c7\'eb\'bf\'d5\'bc\'e4\'c0\'cb\'b7\'d1\'ca\'b1\'bc\'e4\'a3\'ac\'c3\'bf\'b4\'ce\'d6\'d8\'d0\'c2\'c9\'ea\'c7\'eb\'bf\'d5\'bc\'e4\'ca\'b1\'d0\'eb\'bd\'ab\'d4\'ad\'c0\'b4\'b5\'c4\'ca\'fd\'be\'dd\'bf\'bd\'b1\'b4\'b5\'bd\'d0\'c2\'c9\'ea\'c7\'eb\'b5\'c4\'bf\'d5\'bc\'e4\'a3\'ac\'b5\'b1\'ca\'fd\'d7\'e9\'ba\'dc\'b4\'f3\'ca\'b1\'a3\'ac\'d5\'e2\'d6\'d6\'c0\'cb\'b7\'d1\'bb\'b9\'ca\'c7\'cf\'e0\'b5\'b1\'bf\'c9\'b9\'db\'b5\'c4\'a1\'a3\par
   \par
\'bd\'d3\'cf\'c2\'c0\'b4\'ca\'c7\'b6\'d4\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'ca\'b5\'cf\'d6\'b5\'c4\'cb\'b5\'c3\'f7\'a3\'ba\par
    \'cf\'c8\'bd\'a8\'c1\'a2\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'b5\'c4\'b4\'e6\'b4\'a2\'bd\'e1\'b9\'b9\'a3\'ba\par
typedef struct \par
\{\par
    int size;\par
    int count;\par
    void **data;\par
\par
\}DArray;\par
\par
\'bd\'d3\'cf\'c2\'c0\'b4\'b6\'a8\'d2\'e5\'d2\'bb\'b8\'f6enum\'c0\'b4\'b4\'e6\'b7\'c5\'b3\'cc\'d0\'f2\'d6\'d0\'ba\'af\'ca\'fd\'b5\'c4\'b7\'b5\'bb\'d8\'d6\'b5\'a3\'ac\'bf\'c9\'d2\'d4\'b2\'bb\'b6\'a8\'d2\'e5\par
typedef enum \par
\{\par
    RET_OK = 1,\par
    RET_FAIL,\par
    RET_OOM    \par
\}Ret;\par
\'ce\'aa\'c1\'cb\'ca\'b9\'b3\'cc\'d0\'f2\'b8\'fc\'be\'df\'cd\'a8\'d3\'c3\'d0\'d4\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'d2\'bb\'b8\'f6\'bb\'d8\'b5\'f7\'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd\'a3\'ac\'d3\'c3\'d3\'da\'bb\'d8\'b5\'f7\par
\par
typedef void (*VisitFunc)(void *ctx, void *data);\par
\par
\'b6\'a8\'d2\'e5\'d2\'bb\'b8\'f6\'d3\'c3\'d3\'da\'b2\'e2\'ca\'d4\'b5\'c4\'ba\'ea\par
#define return_val_if_fail(p, val)/\par
    if(!(p))\{printf("%s:%d"#p" failed./n",__func__,__LINE__); return val;\}\par
\par
\'cf\'c2\'c3\'e6\'b6\'a8\'d2\'e5\'ca\'fd\'d7\'e9\'b5\'c4\'bb\'f9\'b1\'be\'b2\'d9\'d7\'f7\'a3\'ac\'b0\'fc\'c0\'a8\'a3\'ba\par
\par
DArray *darray_create();\par
static Ret darray_expand(DArray *darray, int needone);\par
Ret darray_preapppend(DArray *darray, void * data);\par
Ret darray_append(DArray *darray, void * data);\par
Ret darray_insert(DArray *darray, int index, void * data);\par
Ret darray_delete(DArray *darray, int index);\par
Ret darray_shrink(DArray *darray);\par
int darray_len(DArray * darray);\par
Ret darray_set_by_index(DArray *darray, int index, void *data);\par
Ret darray_foreach(DArray *darray, VisitFunc visitfunc, void *ctx);\par
Ret darray_destroy(DArray *darray);\par
\'cd\'b7\'ce\'c4\'bc\'fe\'bb\'f9\'b1\'be\'b6\'a8\'d2\'e5\'bd\'e1\'ca\'f8\'a3\'ac\'b1\'a3\'b4\'e6\'ce\'aadarray.h\par
\par
\'ce\'aa\'c1\'cb\'d3\'c5\'bb\'af\'d2\'bb\'b0\'e3\'bb\'e1\'d4\'da\'cd\'b7\'ce\'c4\'bc\'fe\'d6\'d0\'b6\'a8\'d2\'e5\'d1\'a1\'d4\'f1\'b1\'e0\'d2\'eb\'b5\'c4\'ba\'ea\par
#ifndef DARRAY_H\par
#define DARRAY_H\par
\'a1\'a3\'a1\'a3\'a1\'a3\par
\'a1\'a3\'a1\'a3\'a1\'a3\par
#endif /*DARRAY_H*/\par
\'b1\'dc\'c3\'e2\'d6\'d8\'b8\'b4\'b1\'e0\'d2\'eb\par
\par
\'cd\'ea\'d5\'fb\'cd\'b7\'ce\'c4\'bc\'fe\'c8\'e7\'cf\'c2(darray.h)\'a3\'ba\par
\par
#ifndef DARRAY_H\par
#define DARRAY_H\par
#define DEFAULT_A_SIZE 10\par
/*\par
* File:   darray.h\'a3\'ba\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'ba\'af\'ca\'fd\'ca\'b5\'cf\'d6\par
*/\par
\par
typedef struct _DArray\par
\{\par
    int size;\par
    int count;\par
    void **data;\par
\par
\}DArray;\par
\par
typedef enum _Ret\par
\{\par
    RET_OK = 1,\par
    RET_FAIL,\par
    RET_OOM    \par
\}Ret;\par
\par
typedef void (*VisitFunc)(void *ctx, void *data);\par
\par
#define return_val_if_fail(p, val)/\par
    if(!(p))\{printf("%s:%d"#p" failed./n",__func__,__LINE__); return val;\}\par
\par
DArray *darray_create();\par
static Ret darray_expand(DArray *darray, int needone);\par
Ret darray_preapppend(DArray *darray, void * data);\par
Ret darray_append(DArray *darray, void * data);\par
Ret darray_insert(DArray *darray, int index, void * data);\par
Ret darray_delete(DArray *darray, int index);\par
Ret darray_shrink(DArray *darray);\par
int darray_len(DArray * darray);\par
Ret darray_set_by_index(DArray *darray, int index, void *data);\par
Ret darray_foreach(DArray *darray, VisitFunc visitfunc, void *ctx);\par
Ret darray_destroy(DArray *darray);\par
\par
#endif /*DARRAY_H*/\par
\par
\'d2\'d4\'cf\'c2\'ca\'c7\'ba\'af\'ca\'fd\'ca\'b5\'cf\'d6\'b2\'bf\'b7\'d6\'a3\'a8darray.c\'a3\'a9\'a3\'ba\par
#include "darray.h"\par
#include <malloc.h>\par
/*\par
* File:   darray.c\'a3\'ba\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'ba\'af\'ca\'fd\'ca\'b5\'cf\'d6\par
*/\par
\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'ca\'b5\'cf\'d6\'d2\'bb\'b8\'f6DArray\'bd\'e1\'b9\'b9\'cc\'e5\'b5\'c4\'b3\'f5\'ca\'bc\'bb\'af\par
*\'b2\'ce\'ca\'fd\'a3\'bavoid\par
*\'b7\'b5\'bb\'d8\'a3\'baDArray\'bd\'e1\'b9\'b9\'cc\'e5\par
*/\par
DArray *darray_create()\par
\{    \par
    int i = 0;\par
    DArray *darray = (DArray *)malloc(sizeof(DArray));\par
    if(darray != NULL)\par
    \{\par
        darray->count = 0;\par
        darray->size = 0;\par
        darray->data = (void **)malloc(sizeof(void *) * DEFAULT_A_SIZE);\par
\par
        if(darray->data !=NULL)\par
        \{\par
            darray->size = DEFAULT_A_SIZE;\par
            for(i = 0; i <darray->size;i++ )\par
            \{\par
                darray->data[i] = NULL;\par
            \}\par
        \}    \par
        return darray;\par
    \}\par
    \par
    return NULL;\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'cc\'ed\'bc\'d3\'a3\'a8\'ce\'b2\'a3\'a9\'d4\'aa\'cb\'d8\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9  data\'a3\'ba\'b2\'e5\'c8\'eb\'b5\'c4\'ca\'fd\'be\'dd\'b5\'c4\'d6\'b8\'d5\'eb\par
*\'b7\'b5\'bb\'d8\'a3\'baRet \par
*/\par
Ret darray_append(DArray *darray,void * data)\par
\{\par
    return_val_if_fail(darray != NULL && data != NULL, RET_FAIL);\par
\par
    if(darray ==NULL || data == NULL)\par
    \{\par
        return RET_FAIL;\par
    \}\par
\par
    if((darray->count + 1 ) >= darray->size)\par
    \{    \par
        darray_expand(darray, 2);\par
\par
    \}\par
\par
    darray->data[darray->count] = data;\par
    \par
    darray->count++;\par
\par
    return RET_OK;\par
\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'cc\'e6\'bb\'bb\'ca\'fd\'d7\'e9\'d6\'b8\'b6\'a8\'ce\'bb\'d6\'c3\'b5\'c4\'d6\'b5\par
*\'b2\'ce\'ca\'fd\'a3\'ba\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9 index\'a3\'ba\'b2\'e5\'c8\'eb\'ce\'bb\'d6\'c3 data\'a3\'ba\'b2\'e5\'c8\'eb\'b5\'c4\'ca\'fd\'be\'dd\'b5\'c4\'d6\'b8\'d5\'eb\par
*/\par
Ret darray_set_by_index(DArray *darray, int index, void *data)\par
\{\par
    return_val_if_fail(darray != NULL && data != NULL, RET_FAIL);\par
\par
    if(darray ==NULL || data == NULL)\par
    \{\par
        return RET_FAIL;\par
    \}\par
    if(index <0 || index >= darray->count)\par
    \{    \par
        return RET_FAIL;\par
    \}\par
\par
    darray->data[index] = data;\par
    return RET_OK;\par
\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'d4\'f6\'bc\'d3\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9\'b5\'c4\'c8\'dd\'c1\'bf\par
*\'c9\'f9\'c3\'f7\'a3\'ba\'d3\'d0\'bf\'c9\'c4\'dc\'d2\'fd\'c6\'f0\'d0\'c2\'c4\'da\'b4\'e6\'c9\'ea\'c7\'eb\'a3\'ac\'c4\'da\'b4\'e6\'bf\'bd\'b1\'b4\'a3\'ac\'b4\'d3\'b6\'f8\'b8\'c4\'b1\'e4\'d6\'b8\'d5\'eb\'be\'df\'cc\'e5\'d6\'b8\'cf\'f2\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d2\'aa\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'fd\'d7\'e9\'d6\'b8\'d5\'eb\'b5\'d8\'d6\'b7 needone:\'d2\'aa\'d4\'f6\'bc\'d3\'b5\'c4\'ca\'fd\'c1\'bf(\'d5\'e2\'c0\'ef\'d3\'c3\'d3\'da\'d1\'a1\'d4\'f1)\par
*/\par
static Ret darray_expand(DArray *darray, int needone)\par
\{\par
    int newallocsize = 0;\par
\par
    if(needone == 2)\par
    \{\par
         newallocsize = darray->count + (darray->count>>1)+DEFAULT_A_SIZE;\par
    \}\par
    else\par
    \{\par
        newallocsize = darray->count + 1;\par
    \}\par
    void **data = (void **)realloc(darray->data, sizeof(void *) * newallocsize);\par
    if(data != NULL)\par
    \{\par
        darray->data = data;\par
        darray->size = newallocsize;\par
\par
    \}\par
    return RET_OK;\par
\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'cb\'f5\'bc\'f5\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9\'b5\'c4\'c8\'dd\'c1\'bf\par
*\'c9\'f9\'c3\'f7\'a3\'ba\'d3\'d0\'bf\'c9\'c4\'dc\'d2\'fd\'c6\'f0\'d0\'c2\'c4\'da\'b4\'e6\'c9\'ea\'c7\'eb\'a3\'ac\'c4\'da\'b4\'e6\'bf\'bd\'b1\'b4\'a3\'ac\'b4\'d3\'b6\'f8\'b8\'c4\'b1\'e4\'d6\'b8\'d5\'eb\'be\'df\'cc\'e5\'d6\'b8\'cf\'f2\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d2\'aa\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'fd\'d7\'e9\'d6\'b8\'d5\'eb\'b5\'d8\'d6\'b7 \'a3\'a8\'ca\'d3\'c7\'e9\'bf\'f6\'cb\'f5\'bc\'f5\'ce\'aa\'d4\'ad\'c0\'b4\'b5\'c41.5\'b1\'b6\'a3\'ac\'d5\'e2\'d1\'f9\'b2\'bb\'bb\'e1\'b2\'bb\'d3\'c3\'c3\'bf\'b4\'ce\'b6\'bc\'d6\'b4\'d0\'d0\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'a3\'a9\par
*/\par
Ret darray_shrink(DArray *darray)\par
\{\par
    if((darray->count >> 1) < darray->size && (darray->size > DEFAULT_A_SIZE))\par
    \{\par
        int newallocsize = darray->count +darray->count>>1;\par
        void **data = (void **)realloc(darray->data, sizeof(void *) * newallocsize);\par
        if(data != NULL)\par
        \{\par
            darray->data = data;\par
            darray->size = newallocsize;\par
\par
        \}\par
    \par
    return RET_OK;    \par
    \}\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'c9\'be\'b3\'fd\'d4\'aa\'cb\'d8\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9  index\'a3\'ba\'ca\'fd\'be\'dd\'b5\'c4\'ce\'bb\'d6\'c3\par
*\'b7\'b5\'bb\'d8\'a3\'baRet \par
*/\par
Ret darray_delete(DArray *darray, int index)\par
\{\par
    int i = 0;\par
\par
    for(i = index; (i+1) < darray->count; i++)\par
    \{\par
        darray->data[i] = darray->data[i + 1];        \par
    \}\par
\par
    darray->count--;\par
\par
    darray_shrink(darray);\par
\par
    return RET_OK;\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'cc\'ed\'bc\'d3\'a3\'a8\'cd\'b7\'a3\'a9\'d4\'aa\'cb\'d8\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9  data\'a3\'ba\'b2\'e5\'c8\'eb\'b5\'c4\'ca\'fd\'be\'dd\'b5\'c4\'d6\'b8\'d5\'eb\par
*\'b7\'b5\'bb\'d8\'a3\'baRet \par
*/\par
Ret darray_preappend(DArray *darray, void * data)\par
\{\par
    return_val_if_fail(darray != NULL && data != NULL, RET_FAIL);\par
\par
    if(darray ==NULL || data == NULL)\par
    \{\par
        return RET_FAIL;\par
    \}\par
\par
    if(darray->count + 1 > darray->size)\par
    \{\par
        darray_expand(darray, 2);\par
    \}\par
    int i = 0;\par
    for(i = darray->count; i >  0; )\par
    \{\par
        darray->data[i] = darray->data[i - 1];\par
        i--;\par
    \}\par
    darray->data[0] = data;\par
    darray->count++;\par
\par
    return RET_OK;\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'b2\'e5\'c8\'eb\'d4\'aa\'cb\'d8\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9 index\'a3\'ba\'b2\'e5\'c8\'eb\'ce\'bb\'d6\'c3 data\'a3\'ba\'b2\'e5\'c8\'eb\'b5\'c4\'ca\'fd\'be\'dd\'b5\'c4\'d6\'b8\'d5\'eb\par
*\'b7\'b5\'bb\'d8\'a3\'baRet \par
*/\par
Ret darray_insert(DArray *darray, int index, void * data)\par
\{\par
    return_val_if_fail(darray != NULL && data != NULL, RET_FAIL);\par
\par
    if(darray ==NULL || data == NULL)\par
    \{\par
        return RET_FAIL;\par
    \}\par
\par
    if(darray->count + 1 > darray->size)\par
    \{\par
        darray_expand(darray, 1);\par
    \}\par
    int i = 0;\par
    for(i = darray->count; i >  index; )\par
    \{\par
        darray->data[i] = darray->data[i - 1];\par
        i--;\par
    \}\par
    darray->data[index] = data;\par
    darray->count++;\par
\par
    return RET_OK;\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'b1\'e9\'c0\'fa\'ca\'fd\'d7\'e9\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9 visitfunc\'a3\'ba\'bb\'d8\'b5\'f7\'ba\'af\'ca\'fd ctx\'a3\'ba\'c9\'cf\'cf\'c2\'ce\'c4\par
*\'b7\'b5\'bb\'d8\'a3\'baRet \par
*/\par
Ret darray_foreach(DArray *darray, VisitFunc visitfunc, void *ctx)\par
\{\par
    int index = 0;\par
\par
    while(index < darray->count)\par
    \{\par
        visitfunc(ctx, darray->data[index]);\par
        index ++;    \par
    \}\par
    \par
    return RET_OK;\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'ca\'fd\'d7\'e9\'b3\'a4\'b6\'c8\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9\par
*\'b7\'b5\'bb\'d8\'a3\'ba\'ca\'fd\'d7\'e9\'b4\'f3\'d0\'a1\par
*/\par
int darray_len(DArray * darray)\par
\{\par
    return darray->count;\par
\}\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'ca\'cd\'b7\'c5\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9\'c4\'da\'b4\'e6\par
*\'b2\'ce\'ca\'fd\'a3\'badarray:\'d6\'b8\'b6\'a8\'ca\'fd\'d7\'e9\par
*\'b7\'b5\'bb\'d8\'a3\'baRet\par
*/\par
Ret darray_destroy(DArray *darray)\par
\{\par
    if(darray == NULL)\par
    \{\par
        return RET_OK;\par
    \}\par
\par
    free(darray->data);    \par
    darray->data = NULL;\par
\par
    free(darray);\par
    darray = NULL;\par
    return RET_OK;\par
\}\par
\'d7\'ee\'ba\'f3\'b0\'d1\'b2\'e2\'ca\'d4\'d2\'b2\'d0\'b4\'d4\'da\'cf\'c2\'c3\'e6\'a3\'ac\'b9\'a9\'d1\'a7\'cf\'b0\'d5\'df\'b2\'e2\'ca\'d4\'a3\'a8darraytest.c\'a3\'a9\par
\par
#include "darray.h"\par
#include <assert.h>\par
#include <stdio.h>\par
/*\par
* File:   darraytest.c\'a3\'ba\'b6\'af\'cc\'ac\'ca\'fd\'d7\'e9\'ba\'af\'ca\'fd\'ca\'b5\'cf\'d6\par
*/\par
/*\par
*\'b9\'a6\'c4\'dc\'a3\'ba\'b2\'e2\'ca\'d4\'b5\'c4\'b4\'f2\'d3\'a1\'ba\'af\'ca\'fd\'a3\'ac\'d3\'c3\'d3\'da\'bb\'d8\'b5\'f7\par
*/\par
void print_int(void *ctx, void *data)\par
\{\par
    printf(".........%d/n",*(int *)data);\par
\}\par
\par
int main(int argc, char *argv[])\par
\{\par
    \par
    int i = 0;\par
    int a = 8;\par
    int b = 9999;\par
    int c = 555;\par
    int u = 7777;\par
/*    int i = 0;\par
    char *a ="aaaaa";\par
    char *b = "bbbbbbbbb";\par
    char *c = "ccccccc";\par
    char *u = "uuuuuuuuuuuu";\par
*/\par
    DArray *darray = darray_create();\par
    \par
    for(i  = 0;i <23; )\par
    \{\par
        darray_append(darray, &a);\par
        i++;\par
    \}\par
\par
    darray_insert(darray, 3, &b);    \par
    darray_set_by_index(darray, 20, &u);\par
\par
    for(i = 0; i < 16; i++)\par
    \{\par
        darray_delete(darray, 0);\par
    \}\par
\par
    darray_preappend(darray, &b);\par
    int j = 0;\par
    for(j = 0;j < darray->count; )\par
    \{    \par
        printf("%d/n",*(int*)darray->data[j]);\par
        j++;\par
    \}\par
\par
\par
    darray_append(darray,&b);\par
    darray_append(darray,&b);\par
    darray_append(darray,&b);\par
    printf("%d/n",darray->size);\par
    darray_foreach(darray, print_int, NULL);\par
    darray_destroy(darray);\par
\}\par
\par
}
 